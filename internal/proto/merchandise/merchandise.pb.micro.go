// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: internal/proto/merchandise.proto

package merchandise

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MerchandiseService service

func NewMerchandiseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MerchandiseService service

type MerchandiseService interface {
	PutAwayMerchandise(ctx context.Context, opts ...client.CallOption) (MerchandiseService_PutAwayMerchandiseService, error)
	RemoveMerchandise(ctx context.Context, in *RemoveMerchandiseReq, opts ...client.CallOption) (*RemoveMerchandiseResp, error)
	UpdateMerchandise(ctx context.Context, in *UpdateMerchandiseReq, opts ...client.CallOption) (*UpdateMerchandiseResp, error)
	GetMerchandiseDetails(ctx context.Context, in *GetMerchandiseDetailsReq, opts ...client.CallOption) (*GetMerchandiseDetailsResp, error)
	Search(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchResp, error)
	SearchByCategory(ctx context.Context, in *SearchByCategoryReq, opts ...client.CallOption) (*SearchByCategoryResp, error)
	AddMerchandiseStyle(ctx context.Context, opts ...client.CallOption) (MerchandiseService_AddMerchandiseStyleService, error)
	RemoveMerchandiseStyle(ctx context.Context, in *RemoveMerchandiseStyleReq, opts ...client.CallOption) (*RemoveMerchandiseStyleResp, error)
	UpdateMerchandiseStyle(ctx context.Context, in *UpdateMerchandiseStyleReq, opts ...client.CallOption) (*UpdateMerchandiseStyleResp, error)
	GetMerchandiseStyleList(ctx context.Context, in *GetMerchandiseStyleListReq, opts ...client.CallOption) (*GetMerchandiseStyleListResp, error)
	GetMerchandiseStyleDetails(ctx context.Context, in *GetMerchandiseStyleDetailsReq, opts ...client.CallOption) (*GetMerchandiseStyleDetailsResp, error)
}

type merchandiseService struct {
	c    client.Client
	name string
}

func NewMerchandiseService(name string, c client.Client) MerchandiseService {
	return &merchandiseService{
		c:    c,
		name: name,
	}
}

func (c *merchandiseService) PutAwayMerchandise(ctx context.Context, opts ...client.CallOption) (MerchandiseService_PutAwayMerchandiseService, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/PutAwayMerchandise", &PutAwayMerchandiseReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &merchandiseServicePutAwayMerchandise{stream}, nil
}

type MerchandiseService_PutAwayMerchandiseService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*PutAwayMerchandiseReq) error
}

type merchandiseServicePutAwayMerchandise struct {
	stream client.Stream
}

func (x *merchandiseServicePutAwayMerchandise) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *merchandiseServicePutAwayMerchandise) Close() error {
	return x.stream.Close()
}

func (x *merchandiseServicePutAwayMerchandise) Context() context.Context {
	return x.stream.Context()
}

func (x *merchandiseServicePutAwayMerchandise) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *merchandiseServicePutAwayMerchandise) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *merchandiseServicePutAwayMerchandise) Send(m *PutAwayMerchandiseReq) error {
	return x.stream.Send(m)
}

func (c *merchandiseService) RemoveMerchandise(ctx context.Context, in *RemoveMerchandiseReq, opts ...client.CallOption) (*RemoveMerchandiseResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/RemoveMerchandise", in)
	out := new(RemoveMerchandiseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) UpdateMerchandise(ctx context.Context, in *UpdateMerchandiseReq, opts ...client.CallOption) (*UpdateMerchandiseResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/UpdateMerchandise", in)
	out := new(UpdateMerchandiseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) GetMerchandiseDetails(ctx context.Context, in *GetMerchandiseDetailsReq, opts ...client.CallOption) (*GetMerchandiseDetailsResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/GetMerchandiseDetails", in)
	out := new(GetMerchandiseDetailsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) Search(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/Search", in)
	out := new(SearchResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) SearchByCategory(ctx context.Context, in *SearchByCategoryReq, opts ...client.CallOption) (*SearchByCategoryResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/SearchByCategory", in)
	out := new(SearchByCategoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) AddMerchandiseStyle(ctx context.Context, opts ...client.CallOption) (MerchandiseService_AddMerchandiseStyleService, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/AddMerchandiseStyle", &AddMerchandiseStyleReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &merchandiseServiceAddMerchandiseStyle{stream}, nil
}

type MerchandiseService_AddMerchandiseStyleService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*AddMerchandiseStyleReq) error
}

type merchandiseServiceAddMerchandiseStyle struct {
	stream client.Stream
}

func (x *merchandiseServiceAddMerchandiseStyle) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *merchandiseServiceAddMerchandiseStyle) Close() error {
	return x.stream.Close()
}

func (x *merchandiseServiceAddMerchandiseStyle) Context() context.Context {
	return x.stream.Context()
}

func (x *merchandiseServiceAddMerchandiseStyle) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *merchandiseServiceAddMerchandiseStyle) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *merchandiseServiceAddMerchandiseStyle) Send(m *AddMerchandiseStyleReq) error {
	return x.stream.Send(m)
}

func (c *merchandiseService) RemoveMerchandiseStyle(ctx context.Context, in *RemoveMerchandiseStyleReq, opts ...client.CallOption) (*RemoveMerchandiseStyleResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/RemoveMerchandiseStyle", in)
	out := new(RemoveMerchandiseStyleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) UpdateMerchandiseStyle(ctx context.Context, in *UpdateMerchandiseStyleReq, opts ...client.CallOption) (*UpdateMerchandiseStyleResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/UpdateMerchandiseStyle", in)
	out := new(UpdateMerchandiseStyleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) GetMerchandiseStyleList(ctx context.Context, in *GetMerchandiseStyleListReq, opts ...client.CallOption) (*GetMerchandiseStyleListResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/GetMerchandiseStyleList", in)
	out := new(GetMerchandiseStyleListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandiseService) GetMerchandiseStyleDetails(ctx context.Context, in *GetMerchandiseStyleDetailsReq, opts ...client.CallOption) (*GetMerchandiseStyleDetailsResp, error) {
	req := c.c.NewRequest(c.name, "/merchandise_master.MerchandiseService/GetMerchandiseStyleDetails", in)
	out := new(GetMerchandiseStyleDetailsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MerchandiseService service

type MerchandiseServiceHandler interface {
	PutAwayMerchandise(context.Context, MerchandiseService_PutAwayMerchandiseStream) error
	RemoveMerchandise(context.Context, *RemoveMerchandiseReq, *RemoveMerchandiseResp) error
	UpdateMerchandise(context.Context, *UpdateMerchandiseReq, *UpdateMerchandiseResp) error
	GetMerchandiseDetails(context.Context, *GetMerchandiseDetailsReq, *GetMerchandiseDetailsResp) error
	Search(context.Context, *SearchReq, *SearchResp) error
	SearchByCategory(context.Context, *SearchByCategoryReq, *SearchByCategoryResp) error
	AddMerchandiseStyle(context.Context, MerchandiseService_AddMerchandiseStyleStream) error
	RemoveMerchandiseStyle(context.Context, *RemoveMerchandiseStyleReq, *RemoveMerchandiseStyleResp) error
	UpdateMerchandiseStyle(context.Context, *UpdateMerchandiseStyleReq, *UpdateMerchandiseStyleResp) error
	GetMerchandiseStyleList(context.Context, *GetMerchandiseStyleListReq, *GetMerchandiseStyleListResp) error
	GetMerchandiseStyleDetails(context.Context, *GetMerchandiseStyleDetailsReq, *GetMerchandiseStyleDetailsResp) error
}

func RegisterMerchandiseServiceHandler(s server.Server, hdlr MerchandiseServiceHandler, opts ...server.HandlerOption) error {
	type merchandiseService interface {
		PutAwayMerchandise(ctx context.Context, stream server.Stream) error
		RemoveMerchandise(ctx context.Context, in *RemoveMerchandiseReq, out *RemoveMerchandiseResp) error
		UpdateMerchandise(ctx context.Context, in *UpdateMerchandiseReq, out *UpdateMerchandiseResp) error
		GetMerchandiseDetails(ctx context.Context, in *GetMerchandiseDetailsReq, out *GetMerchandiseDetailsResp) error
		Search(ctx context.Context, in *SearchReq, out *SearchResp) error
		SearchByCategory(ctx context.Context, in *SearchByCategoryReq, out *SearchByCategoryResp) error
		AddMerchandiseStyle(ctx context.Context, stream server.Stream) error
		RemoveMerchandiseStyle(ctx context.Context, in *RemoveMerchandiseStyleReq, out *RemoveMerchandiseStyleResp) error
		UpdateMerchandiseStyle(ctx context.Context, in *UpdateMerchandiseStyleReq, out *UpdateMerchandiseStyleResp) error
		GetMerchandiseStyleList(ctx context.Context, in *GetMerchandiseStyleListReq, out *GetMerchandiseStyleListResp) error
		GetMerchandiseStyleDetails(ctx context.Context, in *GetMerchandiseStyleDetailsReq, out *GetMerchandiseStyleDetailsResp) error
	}
	type MerchandiseService struct {
		merchandiseService
	}
	h := &merchandiseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MerchandiseService{h}, opts...))
}

type merchandiseServiceHandler struct {
	MerchandiseServiceHandler
}

func (h *merchandiseServiceHandler) PutAwayMerchandise(ctx context.Context, stream server.Stream) error {
	return h.MerchandiseServiceHandler.PutAwayMerchandise(ctx, &merchandiseServicePutAwayMerchandiseStream{stream})
}

type MerchandiseService_PutAwayMerchandiseStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PutAwayMerchandiseReq, error)
}

type merchandiseServicePutAwayMerchandiseStream struct {
	stream server.Stream
}

func (x *merchandiseServicePutAwayMerchandiseStream) Close() error {
	return x.stream.Close()
}

func (x *merchandiseServicePutAwayMerchandiseStream) Context() context.Context {
	return x.stream.Context()
}

func (x *merchandiseServicePutAwayMerchandiseStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *merchandiseServicePutAwayMerchandiseStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *merchandiseServicePutAwayMerchandiseStream) Recv() (*PutAwayMerchandiseReq, error) {
	m := new(PutAwayMerchandiseReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *merchandiseServiceHandler) RemoveMerchandise(ctx context.Context, in *RemoveMerchandiseReq, out *RemoveMerchandiseResp) error {
	return h.MerchandiseServiceHandler.RemoveMerchandise(ctx, in, out)
}

func (h *merchandiseServiceHandler) UpdateMerchandise(ctx context.Context, in *UpdateMerchandiseReq, out *UpdateMerchandiseResp) error {
	return h.MerchandiseServiceHandler.UpdateMerchandise(ctx, in, out)
}

func (h *merchandiseServiceHandler) GetMerchandiseDetails(ctx context.Context, in *GetMerchandiseDetailsReq, out *GetMerchandiseDetailsResp) error {
	return h.MerchandiseServiceHandler.GetMerchandiseDetails(ctx, in, out)
}

func (h *merchandiseServiceHandler) Search(ctx context.Context, in *SearchReq, out *SearchResp) error {
	return h.MerchandiseServiceHandler.Search(ctx, in, out)
}

func (h *merchandiseServiceHandler) SearchByCategory(ctx context.Context, in *SearchByCategoryReq, out *SearchByCategoryResp) error {
	return h.MerchandiseServiceHandler.SearchByCategory(ctx, in, out)
}

func (h *merchandiseServiceHandler) AddMerchandiseStyle(ctx context.Context, stream server.Stream) error {
	return h.MerchandiseServiceHandler.AddMerchandiseStyle(ctx, &merchandiseServiceAddMerchandiseStyleStream{stream})
}

type MerchandiseService_AddMerchandiseStyleStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*AddMerchandiseStyleReq, error)
}

type merchandiseServiceAddMerchandiseStyleStream struct {
	stream server.Stream
}

func (x *merchandiseServiceAddMerchandiseStyleStream) Close() error {
	return x.stream.Close()
}

func (x *merchandiseServiceAddMerchandiseStyleStream) Context() context.Context {
	return x.stream.Context()
}

func (x *merchandiseServiceAddMerchandiseStyleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *merchandiseServiceAddMerchandiseStyleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *merchandiseServiceAddMerchandiseStyleStream) Recv() (*AddMerchandiseStyleReq, error) {
	m := new(AddMerchandiseStyleReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *merchandiseServiceHandler) RemoveMerchandiseStyle(ctx context.Context, in *RemoveMerchandiseStyleReq, out *RemoveMerchandiseStyleResp) error {
	return h.MerchandiseServiceHandler.RemoveMerchandiseStyle(ctx, in, out)
}

func (h *merchandiseServiceHandler) UpdateMerchandiseStyle(ctx context.Context, in *UpdateMerchandiseStyleReq, out *UpdateMerchandiseStyleResp) error {
	return h.MerchandiseServiceHandler.UpdateMerchandiseStyle(ctx, in, out)
}

func (h *merchandiseServiceHandler) GetMerchandiseStyleList(ctx context.Context, in *GetMerchandiseStyleListReq, out *GetMerchandiseStyleListResp) error {
	return h.MerchandiseServiceHandler.GetMerchandiseStyleList(ctx, in, out)
}

func (h *merchandiseServiceHandler) GetMerchandiseStyleDetails(ctx context.Context, in *GetMerchandiseStyleDetailsReq, out *GetMerchandiseStyleDetailsResp) error {
	return h.MerchandiseServiceHandler.GetMerchandiseStyleDetails(ctx, in, out)
}
