// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: internal/proto/shopping_cart.proto

package shopping_cart

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShoppingCartService service

func NewShoppingCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShoppingCartService service

type ShoppingCartService interface {
	AddShoppingCart(ctx context.Context, in *AddShoppingCartReq, opts ...client.CallOption) (*ShoppingCartResp, error)
	RemoveShoppingCart(ctx context.Context, in *RemoveShoppingCartReq, opts ...client.CallOption) (*ShoppingCartResp, error)
	GetShoppingCartList(ctx context.Context, in *GetShoppingCartListReq, opts ...client.CallOption) (*ShoppingCartResp, error)
}

type shoppingCartService struct {
	c    client.Client
	name string
}

func NewShoppingCartService(name string, c client.Client) ShoppingCartService {
	return &shoppingCartService{
		c:    c,
		name: name,
	}
}

func (c *shoppingCartService) AddShoppingCart(ctx context.Context, in *AddShoppingCartReq, opts ...client.CallOption) (*ShoppingCartResp, error) {
	req := c.c.NewRequest(c.name, "/shopping_cart_master.ShoppingCartService/AddShoppingCart", in)
	out := new(ShoppingCartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartService) RemoveShoppingCart(ctx context.Context, in *RemoveShoppingCartReq, opts ...client.CallOption) (*ShoppingCartResp, error) {
	req := c.c.NewRequest(c.name, "/shopping_cart_master.ShoppingCartService/RemoveShoppingCart", in)
	out := new(ShoppingCartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartService) GetShoppingCartList(ctx context.Context, in *GetShoppingCartListReq, opts ...client.CallOption) (*ShoppingCartResp, error) {
	req := c.c.NewRequest(c.name, "/shopping_cart_master.ShoppingCartService/GetShoppingCartList", in)
	out := new(ShoppingCartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShoppingCartService service

type ShoppingCartServiceHandler interface {
	AddShoppingCart(context.Context, *AddShoppingCartReq, *ShoppingCartResp) error
	RemoveShoppingCart(context.Context, *RemoveShoppingCartReq, *ShoppingCartResp) error
	GetShoppingCartList(context.Context, *GetShoppingCartListReq, *ShoppingCartResp) error
}

func RegisterShoppingCartServiceHandler(s server.Server, hdlr ShoppingCartServiceHandler, opts ...server.HandlerOption) error {
	type shoppingCartService interface {
		AddShoppingCart(ctx context.Context, in *AddShoppingCartReq, out *ShoppingCartResp) error
		RemoveShoppingCart(ctx context.Context, in *RemoveShoppingCartReq, out *ShoppingCartResp) error
		GetShoppingCartList(ctx context.Context, in *GetShoppingCartListReq, out *ShoppingCartResp) error
	}
	type ShoppingCartService struct {
		shoppingCartService
	}
	h := &shoppingCartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShoppingCartService{h}, opts...))
}

type shoppingCartServiceHandler struct {
	ShoppingCartServiceHandler
}

func (h *shoppingCartServiceHandler) AddShoppingCart(ctx context.Context, in *AddShoppingCartReq, out *ShoppingCartResp) error {
	return h.ShoppingCartServiceHandler.AddShoppingCart(ctx, in, out)
}

func (h *shoppingCartServiceHandler) RemoveShoppingCart(ctx context.Context, in *RemoveShoppingCartReq, out *ShoppingCartResp) error {
	return h.ShoppingCartServiceHandler.RemoveShoppingCart(ctx, in, out)
}

func (h *shoppingCartServiceHandler) GetShoppingCartList(ctx context.Context, in *GetShoppingCartListReq, out *ShoppingCartResp) error {
	return h.ShoppingCartServiceHandler.GetShoppingCartList(ctx, in, out)
}
