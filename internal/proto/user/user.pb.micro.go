// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: internal/proto/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoReq, opts ...client.CallOption) (*UpdatePersonalInfoResp, error)
	ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...client.CallOption) (*ModifyPasswordResp, error)
	AddReceiverAddress(ctx context.Context, in *AddReceiverAddressReq, opts ...client.CallOption) (*AddReceiverAddressResp, error)
	DeleteReceiverAddress(ctx context.Context, in *DeleteReceiverAddressReq, opts ...client.CallOption) (*DeleteReceiverAddressResp, error)
	UpdateReceiverAddress(ctx context.Context, in *UpdateReceiverAddressReq, opts ...client.CallOption) (*UpdateReceiverAddressResp, error)
	GetReceiverAddress(ctx context.Context, in *GetReceiverAddressReq, opts ...client.CallOption) (*GetReceiverAddressResp, error)
	AddFavourites(ctx context.Context, in *AddFavouritesReq, opts ...client.CallOption) (*AddFavouritesResp, error)
	DeleteFavourites(ctx context.Context, in *DeleteFavouritesReq, opts ...client.CallOption) (*DeleteFavouritesResp, error)
	GetFavouritesList(ctx context.Context, in *GetFavouritesListReq, opts ...client.CallOption) (*GetFavouritesListResp, error)
	AddFootprint(ctx context.Context, in *AddFootprintReq, opts ...client.CallOption) (*AddFootprintResp, error)
	DeleteFootprint(ctx context.Context, in *DeleteFootprintReq, opts ...client.CallOption) (*DeleteFootprintResp, error)
	GetFootprintList(ctx context.Context, in *GetFootprintListReq, opts ...client.CallOption) (*GetFootprintListResp, error)
	FollowMerchant(ctx context.Context, in *FollowMerchantReq, opts ...client.CallOption) (*FollowMerchantResp, error)
	CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...client.CallOption) (*CancelFollowResp, error)
	GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...client.CallOption) (*GetFollowListResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoReq, opts ...client.CallOption) (*UpdatePersonalInfoResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/UpdatePersonalInfo", in)
	out := new(UpdatePersonalInfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...client.CallOption) (*ModifyPasswordResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/ModifyPassword", in)
	out := new(ModifyPasswordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddReceiverAddress(ctx context.Context, in *AddReceiverAddressReq, opts ...client.CallOption) (*AddReceiverAddressResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/AddReceiverAddress", in)
	out := new(AddReceiverAddressResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteReceiverAddress(ctx context.Context, in *DeleteReceiverAddressReq, opts ...client.CallOption) (*DeleteReceiverAddressResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/DeleteReceiverAddress", in)
	out := new(DeleteReceiverAddressResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateReceiverAddress(ctx context.Context, in *UpdateReceiverAddressReq, opts ...client.CallOption) (*UpdateReceiverAddressResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/UpdateReceiverAddress", in)
	out := new(UpdateReceiverAddressResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetReceiverAddress(ctx context.Context, in *GetReceiverAddressReq, opts ...client.CallOption) (*GetReceiverAddressResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/GetReceiverAddress", in)
	out := new(GetReceiverAddressResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddFavourites(ctx context.Context, in *AddFavouritesReq, opts ...client.CallOption) (*AddFavouritesResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/AddFavourites", in)
	out := new(AddFavouritesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteFavourites(ctx context.Context, in *DeleteFavouritesReq, opts ...client.CallOption) (*DeleteFavouritesResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/DeleteFavourites", in)
	out := new(DeleteFavouritesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetFavouritesList(ctx context.Context, in *GetFavouritesListReq, opts ...client.CallOption) (*GetFavouritesListResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/GetFavouritesList", in)
	out := new(GetFavouritesListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddFootprint(ctx context.Context, in *AddFootprintReq, opts ...client.CallOption) (*AddFootprintResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/AddFootprint", in)
	out := new(AddFootprintResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteFootprint(ctx context.Context, in *DeleteFootprintReq, opts ...client.CallOption) (*DeleteFootprintResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/DeleteFootprint", in)
	out := new(DeleteFootprintResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetFootprintList(ctx context.Context, in *GetFootprintListReq, opts ...client.CallOption) (*GetFootprintListResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/GetFootprintList", in)
	out := new(GetFootprintListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FollowMerchant(ctx context.Context, in *FollowMerchantReq, opts ...client.CallOption) (*FollowMerchantResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/FollowMerchant", in)
	out := new(FollowMerchantResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...client.CallOption) (*CancelFollowResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/CancelFollow", in)
	out := new(CancelFollowResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...client.CallOption) (*GetFollowListResp, error) {
	req := c.c.NewRequest(c.name, "/user_master.UserService/GetFollowList", in)
	out := new(GetFollowListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	UpdatePersonalInfo(context.Context, *UpdatePersonalInfoReq, *UpdatePersonalInfoResp) error
	ModifyPassword(context.Context, *ModifyPasswordReq, *ModifyPasswordResp) error
	AddReceiverAddress(context.Context, *AddReceiverAddressReq, *AddReceiverAddressResp) error
	DeleteReceiverAddress(context.Context, *DeleteReceiverAddressReq, *DeleteReceiverAddressResp) error
	UpdateReceiverAddress(context.Context, *UpdateReceiverAddressReq, *UpdateReceiverAddressResp) error
	GetReceiverAddress(context.Context, *GetReceiverAddressReq, *GetReceiverAddressResp) error
	AddFavourites(context.Context, *AddFavouritesReq, *AddFavouritesResp) error
	DeleteFavourites(context.Context, *DeleteFavouritesReq, *DeleteFavouritesResp) error
	GetFavouritesList(context.Context, *GetFavouritesListReq, *GetFavouritesListResp) error
	AddFootprint(context.Context, *AddFootprintReq, *AddFootprintResp) error
	DeleteFootprint(context.Context, *DeleteFootprintReq, *DeleteFootprintResp) error
	GetFootprintList(context.Context, *GetFootprintListReq, *GetFootprintListResp) error
	FollowMerchant(context.Context, *FollowMerchantReq, *FollowMerchantResp) error
	CancelFollow(context.Context, *CancelFollowReq, *CancelFollowResp) error
	GetFollowList(context.Context, *GetFollowListReq, *GetFollowListResp) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoReq, out *UpdatePersonalInfoResp) error
		ModifyPassword(ctx context.Context, in *ModifyPasswordReq, out *ModifyPasswordResp) error
		AddReceiverAddress(ctx context.Context, in *AddReceiverAddressReq, out *AddReceiverAddressResp) error
		DeleteReceiverAddress(ctx context.Context, in *DeleteReceiverAddressReq, out *DeleteReceiverAddressResp) error
		UpdateReceiverAddress(ctx context.Context, in *UpdateReceiverAddressReq, out *UpdateReceiverAddressResp) error
		GetReceiverAddress(ctx context.Context, in *GetReceiverAddressReq, out *GetReceiverAddressResp) error
		AddFavourites(ctx context.Context, in *AddFavouritesReq, out *AddFavouritesResp) error
		DeleteFavourites(ctx context.Context, in *DeleteFavouritesReq, out *DeleteFavouritesResp) error
		GetFavouritesList(ctx context.Context, in *GetFavouritesListReq, out *GetFavouritesListResp) error
		AddFootprint(ctx context.Context, in *AddFootprintReq, out *AddFootprintResp) error
		DeleteFootprint(ctx context.Context, in *DeleteFootprintReq, out *DeleteFootprintResp) error
		GetFootprintList(ctx context.Context, in *GetFootprintListReq, out *GetFootprintListResp) error
		FollowMerchant(ctx context.Context, in *FollowMerchantReq, out *FollowMerchantResp) error
		CancelFollow(ctx context.Context, in *CancelFollowReq, out *CancelFollowResp) error
		GetFollowList(ctx context.Context, in *GetFollowListReq, out *GetFollowListResp) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoReq, out *UpdatePersonalInfoResp) error {
	return h.UserServiceHandler.UpdatePersonalInfo(ctx, in, out)
}

func (h *userServiceHandler) ModifyPassword(ctx context.Context, in *ModifyPasswordReq, out *ModifyPasswordResp) error {
	return h.UserServiceHandler.ModifyPassword(ctx, in, out)
}

func (h *userServiceHandler) AddReceiverAddress(ctx context.Context, in *AddReceiverAddressReq, out *AddReceiverAddressResp) error {
	return h.UserServiceHandler.AddReceiverAddress(ctx, in, out)
}

func (h *userServiceHandler) DeleteReceiverAddress(ctx context.Context, in *DeleteReceiverAddressReq, out *DeleteReceiverAddressResp) error {
	return h.UserServiceHandler.DeleteReceiverAddress(ctx, in, out)
}

func (h *userServiceHandler) UpdateReceiverAddress(ctx context.Context, in *UpdateReceiverAddressReq, out *UpdateReceiverAddressResp) error {
	return h.UserServiceHandler.UpdateReceiverAddress(ctx, in, out)
}

func (h *userServiceHandler) GetReceiverAddress(ctx context.Context, in *GetReceiverAddressReq, out *GetReceiverAddressResp) error {
	return h.UserServiceHandler.GetReceiverAddress(ctx, in, out)
}

func (h *userServiceHandler) AddFavourites(ctx context.Context, in *AddFavouritesReq, out *AddFavouritesResp) error {
	return h.UserServiceHandler.AddFavourites(ctx, in, out)
}

func (h *userServiceHandler) DeleteFavourites(ctx context.Context, in *DeleteFavouritesReq, out *DeleteFavouritesResp) error {
	return h.UserServiceHandler.DeleteFavourites(ctx, in, out)
}

func (h *userServiceHandler) GetFavouritesList(ctx context.Context, in *GetFavouritesListReq, out *GetFavouritesListResp) error {
	return h.UserServiceHandler.GetFavouritesList(ctx, in, out)
}

func (h *userServiceHandler) AddFootprint(ctx context.Context, in *AddFootprintReq, out *AddFootprintResp) error {
	return h.UserServiceHandler.AddFootprint(ctx, in, out)
}

func (h *userServiceHandler) DeleteFootprint(ctx context.Context, in *DeleteFootprintReq, out *DeleteFootprintResp) error {
	return h.UserServiceHandler.DeleteFootprint(ctx, in, out)
}

func (h *userServiceHandler) GetFootprintList(ctx context.Context, in *GetFootprintListReq, out *GetFootprintListResp) error {
	return h.UserServiceHandler.GetFootprintList(ctx, in, out)
}

func (h *userServiceHandler) FollowMerchant(ctx context.Context, in *FollowMerchantReq, out *FollowMerchantResp) error {
	return h.UserServiceHandler.FollowMerchant(ctx, in, out)
}

func (h *userServiceHandler) CancelFollow(ctx context.Context, in *CancelFollowReq, out *CancelFollowResp) error {
	return h.UserServiceHandler.CancelFollow(ctx, in, out)
}

func (h *userServiceHandler) GetFollowList(ctx context.Context, in *GetFollowListReq, out *GetFollowListResp) error {
	return h.UserServiceHandler.GetFollowList(ctx, in, out)
}
